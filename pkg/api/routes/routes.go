// go:build !coverage
//go:build !coverage
// +build !coverage

// this package should not be tested
// it is just an implementation and integration fo methos that are goning to be tested on integration

package routes

import (
	"dall06/go-cleanapi/config"
	"dall06/go-cleanapi/pkg/api/controller"
	"fmt"

	"strings"

	swagger "github.com/gofiber/swagger"
	"github.com/gofiber/fiber/v2"

	// docs are generated by Swag CLI, you have to import them.
	// replace with your own docs folder, usually "github.com/username/reponame/docs"
	_ "dall06/go-cleanapi/docs"
)

type RoutesRepository interface {
	SetV1()
}

var _ RoutesRepository = (*Routes)(nil)

type Routes struct {
	app        *fiber.App
	controller controller.Controller
}

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v1
func NewRoutes(app *fiber.App, ctrl controller.Controller) RoutesRepository {
	return Routes{
		app:      app,
		controller: ctrl,
	}
}

func (routes Routes) SetV1() {
	bp := fmt.Sprintf("%s/%s", config.ApiBasePath, "v1")
	
	var wp strings.Builder
	wp.WriteString(bp)
	wp.WriteString("/welcome")
	welcomePath := wp.String()
	routes.app.Get(welcomePath, routes.controller.Permision)

	var sp strings.Builder
	sp.WriteString(bp)
	sp.WriteString("/swagger/*")
	swaggerPath := sp.String()
	routes.app.Get(swaggerPath, swagger.HandlerDefault) // default
	
	var sb strings.Builder
	sb.WriteString(bp)
	sb.WriteString("/user")
	userPath := sb.String()
	userGroup := routes.app.Group(userPath)
	userGroup.Get("/hello", func(c *fiber.Ctx) error {
		return c.SendString("welcome to go-cleanapi user path ...")
	})
	userGroup.Post("/", routes.controller.Post)
	userGroup.Get("/:id", routes.controller.Get)
	userGroup.Get("/all", routes.controller.GetAll)
	userGroup.Put("/:id", routes.controller.Put)
	userGroup.Delete("/:id", routes.controller.Delete)
}
